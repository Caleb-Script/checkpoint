// /backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // wichtig für Migrate:
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum PresenceState {
  INSIDE
  OUTSIDE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum RsvpChoice {
  YES
  NO
}

model Event {
  id            String    @id @default(cuid())
  name          String
  startsAt      DateTime
  endsAt        DateTime
  allowReEntry  Boolean   @default(true)
  rotateSeconds Int       @default(300)
  maxSeats      Int       @default(300)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  seats         Seat[]
  invitations   Invitation[]
  tickets       Ticket[]
  scanLogs      ScanLog[]
}

model Seat {
  id        String  @id @default(cuid())
  eventId   String
  section   String?
  table     String?
  number    String?
  note      String?

  event     Event   @relation(fields: [eventId], references: [id])
  ticket    Ticket?

  @@index([eventId])
}

model Invitation {
  id             String            @id @default(cuid())
  eventId        String
  guestProfileId String?
  status         InvitationStatus  @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // RSVP & Approval
  rsvpChoice     RsvpChoice?
  rsvpAt         DateTime?
  approved       Boolean           @default(false)
  approvedAt     DateTime?
  approvedById   String?
  approvedBy     User?             @relation("InvitationApprovedBy", fields: [approvedById], references: [id])

  // ▶️ NEU: “Plus-Ones” / Weiter-Einladen
  maxInvitees    Int               @default(0)
  invitedByInvitationId String?
  invitedBy      Invitation?       @relation("InviteChain", fields: [invitedByInvitationId], references: [id])
  invitedChildren Invitation[]     @relation("InviteChain")

  // Optional: sharebarer Kurzcode für personalisierte Links
  shareCode      String?           @unique

  event          Event        @relation(fields: [eventId], references: [id])
  ticket         Ticket?

  @@index([eventId, status])
  @@index([eventId, rsvpChoice])
  @@index([approved, approvedAt])
}

model Ticket {
  id             String        @id @default(cuid())
  eventId        String
  invitationId   String @unique
  seatId         String?  @unique
  guestProfileId String?  @unique
  currentState   PresenceState @default(OUTSIDE)
  deviceBoundKey String?
  revoked        Boolean       @default(false)
  lastRotatedAt  DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  event       Event       @relation(fields: [eventId], references: [id])
  invitation  Invitation  @relation(fields: [invitationId], references: [id])
  seat        Seat?       @relation(fields: [seatId], references: [id])
  scanLogs    ScanLog[]
  shareGuard  ShareGuard?

  @@index([eventId])
}

model ScanLog {
  id         String       @id @default(cuid())
  ticketId   String
  eventId    String
  byUserId   String?
  direction  PresenceState
  verdict    String
  gate       String?
  deviceHash String?
  createdAt  DateTime     @default(now())

  ticket Ticket @relation(fields: [ticketId], references: [id])
  event  Event  @relation(fields: [eventId], references: [id])
  byUser User?  @relation(fields: [byUserId], references: [id])

  @@index([eventId, createdAt])
}

model ShareGuard {
  id             String  @id @default(cuid())
  ticketId       String  @unique
  failCount      Int     @default(0)
  lastFailAt     DateTime?
  blockedUntil   DateTime?
  reason         String?

  ticket         Ticket  @relation(fields: [ticketId], references: [id])
}